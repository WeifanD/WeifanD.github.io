mtcars %>%
inner_join(a)
mtcars
mtcars %>%
join(a, by=c(rownames(.)=rownames(a)))
mtcars %>%
join(a, by=c(rownames(.)==rownames(a)))
mtcars %>%
join(a, by=c(rownames(.)=rownames(a)))
mtcars %>%
join(a, by=c(rownames(mtcars)=rownames(a)))
a <- map2(mods, by_cyl, predict) %>%
flatten_df() %>%
t() %>%
as.data.frame() %>%
mutate(a=rownames(.))
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a)
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1)
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1))
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_line()+
coord_flip()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1))
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(mpg, e))+
geom_line()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_point()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_point()+
coord_flip()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = sqrt(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_point()+
coord_flip()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_point()+
coord_flip()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e=reorder(a,e)))+
geom_point()+
coord_flip()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_point()+
coord_flip()
mtcars %>%
mutate(
mod1 = map(~ glm(mpg ~ wt, data = .)
)
library("dplyr", lib.loc="~/R/win-library/3.4")
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.4")
mtcars %>%
mutate(
mod1 = map(~ glm(mpg ~ wt, data = .)
)
mtcars %>%
mutate(
mod1 = map(~ glm(mpg ~ wt, data = .)
)
library("purrr", lib.loc="~/R/win-library/3.4")
mtcars %>%
mutate(
mod1 = map(~ glm(mpg ~ wt, data = .)
)
mtcars %>%
mutate(mod1 = map(~ glm(mpg ~ wt, data = .)
)
mtcars %>%
mtcars %>%
mutate(mod1 = map(~ glm(mpg ~ wt, data = .))
)
mtcars %>%
mutate(mod1 = map(., ~ glm(mpg ~ wt, data = .))
)
mtcars %>%
nest %>%
mutate(mod1 = map(., ~ glm(mpg ~ wt, data = .))
)
mtcars %>%
nest() %>%
mutate(mod1 = map(., ~ glm(mpg ~ wt, data = .))
)
library("tidyr", lib.loc="~/R/win-library/3.4")
mtcars %>%
nest()
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(., ~ glm(mpg ~ wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(., ~ glm(.$mpg ~ .$wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest()
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(.$mpg ~ .$wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .),
mod2 = map(data, ~ lm(mpg ~ wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map(summary)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map(mod1, summary)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, mtcars, predict)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, mtcars %>% select(mpg, wt), predict)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predict),
)
dim(mtcars)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predict),
y=data$mpg
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predic)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predict)
)
result <- mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predict)
)
View(result)
result$pred1
result$pred1[[1]]
result$pred1 %>% class()
result$pred1[[1]] %>% class()
result$pred1[[1]]-result$pred2[[1]]
sum(result$pred1[[1]]-result$pred2[[1]])
result$pred2[[1]]
result <- mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predict)
)
result
library(dplyr)
library(ggplot2)
library(purrr) # Functional programming
library(tidyr)
# create dfs to loop over
df <- data.frame(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
obj <- list(df1 = df, df2 = df, df3 = df, df4 = df )
# create file names to loop over
path <- getwd()
folder <- "RDa"
names <- c("df1", "df2", "df3", "df4")
if(!file.exists(folder)){
dir.create(folder)
fnames <- lapply(names, function(x) paste0((file.path(path, folder)), '/', x, ".RDa"))
}
fnames <- lapply(names, function(x) paste0((file.path(path, folder)), '/', x, ".RDa"))
walk2(obj, fnames, ~ save(.x, file = .y))
dir('RDa')
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
dir_images = "assets/images",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
i = 0
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f), encoding = "UTF-8")
outFile <- file.path(path_site,
dir_md,
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown',
base.url = "/")
opts_chunk$set(fig.path = dir_images,
fig.width  = 8.5,
fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
i = i + 1
} else {
warning(paste("Not processing ", f, " Please set published to 'false' to convert.", sep=' '))
}
message(paste0("The number of total processed files is:", i, sep = " "))
}
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
dir_images = "assets/images",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
i = 0
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f), encoding = "UTF-8")
outFile <- file.path(path_site,
dir_md,
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown',
base.url = "/")
opts_chunk$set(fig.path = dir_images,
fig.width  = 8.5,
fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
i = i + 1
} else {
warning(paste("Not processing ", f, " Please set published to 'false' to convert.", sep=' '))
}
message(paste0("The number of total processed files is:", i, sep = " "))
}
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
dir_images = "assets/images",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
i = 0
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f), encoding = "UTF-8")
outFile <- file.path(path_site,
dir_md,
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown',
base.url = "/")
opts_chunk$set(fig.path = dir_images,
fig.width  = 8.5,
fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE)
i = i + 1
}
message(paste0("The number of total processed files is:", i, sep = " "))
}
rmd2md()
load('../_rmd/sales.Rdata')
sales <- sales %>%
as.tibble()
## File structure and content
#sprintf('%d rows and %d columns data has loaded now.', nrow(sales), ncol(sales))
head(sales)
summary(sales)
rmd2md()
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
dir_images = "assets/images",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
i = 0
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f), encoding = "UTF-8")
outFile <- file.path(path_site,
dir_md,
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown',
base.url = "/")
opts_chunk$set(fig.path = dir_images,
fig.width  = 8.5,
fig.height = 5.25)
try(knit(text=content, output=outFile), silent=FALSE, encoding = 'utf-8')
i = i + 1
}
message(paste0("The number of total processed files is:", i, sep = " "))
}
rmd2md()
library("blogdown", lib.loc="~/R/win-library/3.4")
build_site
getOption('encoding')
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
dir_images = "assets/images",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
i = 0
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f), encoding = "UTF-8")
outFile <- file.path(path_site,
dir_md,
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown',
base.url = "/")
opts_chunk$set(fig.path = dir_images,
fig.width  = 8.5,
fig.height = 5.25)
try(knit(text=content, output=outFile, encoding = "UTF-8"), silent=FALSE)
i = i + 1
}
message(paste0("The number of total processed files is:", i, sep = " "))
}
rmd2md()
path_site = getwd()
dir_images = "assets/images/"
path
dir.
dir.exists('C:/Users/lenovo/Documents/master/blog/weifand.github.io/_rmd/sales.Rdata')
dir.exists('C:/Users/lenovo/Documents/master/blog/weifand.github.io/_rmd')
dir.exists('C:/Users/lenovo/Documents/master/blog/weifand.github.io/_rmd/sales.RData')
file.exists('C:/Users/lenovo/Documents/master/blog/weifand.github.io/_rmd/sales.RData')
rmd2md()
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
dir_images = "assets/images/",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
i = 0
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f), encoding = "UTF-8")
outFile <- file.path(path_site,
dir_md,
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown',
base.url = "/")
opts_chunk$set(fig.path = dir_images,
fig.width  = 8.5,
fig.height = 5.25)
try(knit(text=content, output=outFile, encoding = "UTF-8"), silent=FALSE)
i = i + 1
}
message(paste0("The number of total processed files is:", i, sep = " "))
}
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
dir_images = "assets/images/",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
i = 0
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f), encoding = "UTF-8")
outFile <- file.path(path_site,
dir_md,
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown',
base.url = "/")
opts_chunk$set(fig.path = dir_images,
fig.width  = 8.5,
fig.height = 5.25)
try(knit(text=content, output=outFile, encoding = "UTF-8"), silent=FALSE)
i = i + 1
}
message(paste0("The number of total processed files is:", i, sep = " "))
}
rmd2md()
