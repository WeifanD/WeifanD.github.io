dim(speaker_scene_matrix)
norm <- speaker_scene_matrix / rowSums(speaker_scene_matrix)
hc <- hclust(dist(norm, method = "manhattan"))
plot(hc)
by_speaker_scene <- dialogue %>%
count(scene, character) %>%
filter(n>20)
speaker_scene_matrix <- by_speaker_scene %>%
acast(character ~ scene, fun.aggregate = length)
dim(speaker_scene_matrix)
norm <- speaker_scene_matrix / rowSums(speaker_scene_matrix)
hc <- hclust(dist(norm, method = "manhattan"))
plot(hc)
by_speaker_scene <- dialogue %>%
count(scene, character) %>%
filter(n>15)
speaker_scene_matrix <- by_speaker_scene %>%
acast(character ~ scene, fun.aggregate = length)
dim(speaker_scene_matrix)
norm <- speaker_scene_matrix / rowSums(speaker_scene_matrix)
hc <- hclust(dist(norm, method = "manhattan"))
plot(hc)
scenes <- by_speaker_scene %>%
# filter(n() > 1) %>%        # scenes with > 1 character
ungroup() %>%
mutate(scene = as.numeric(factor(scene)),
character = factor(character, levels = ordering))
ggplot(scenes, aes(scene, character)) +
geom_point() +
geom_path(aes(group = scene))
scenes <- dialogue %>%
count(scene, character)
filter(n() > 1) %>%        # scenes with > 1 character
ungroup() %>%
mutate(scene = as.numeric(factor(scene)),
character = factor(character, levels = ordering))
scenes <- dialogue %>%
count(scene, character) %>%
filter(n() > 1) %>%        # scenes with > 1 character
ungroup() %>%
mutate(scene = as.numeric(factor(scene)),
character = factor(character, levels = ordering))
View(scenes)
dialogue %>%
count(scene, character)
scenes <- dialogue %>%
count(scene, character) %>%
filter(n > 1) %>%        # scenes with > 1 character
ungroup() %>%
mutate(scene = as.numeric(factor(scene)),
character = factor(character, levels = ordering))
View(scenes)
scenes <- dialogue %>%
count(scene, character) %>%
filter(n > 1) %>%        # scenes with > 1 character
ungroup()
scenes <- dialogue %>%
count(scene, character) %>%
filter(n > 1) %>%        # scenes with > 1 character
ungroup() %>%
mutate(scene = as.numeric(factor(scene)),
character = factor(character, levels = ordering))
scenes <- dialogue %>%
count(scene, character) %>%
filter(n > 1) %>%        # scenes with > 1 character
ungroup() %>%
mutate(scene = as.numeric(factor(scene)))
ggplot(scenes, aes(scene, character)) +
geom_point() +
geom_path(aes(group = scene))
scenes <- dialogue %>%
count(scene, character) %>%
filter(n > 10) %>%        # scenes with > 1 character
ungroup() %>%
mutate(scene = as.numeric(factor(scene)))
# character = factor(character, levels = ordering))
ggplot(scenes, aes(scene, character)) +
geom_point() +
geom_path(aes(group = scene))
scenes <- dialogue %>%
count(scene, character) %>%
filter(n > 20) %>%        # scenes with > 1 character
ungroup() %>%
mutate(scene = as.numeric(factor(scene)))
# character = factor(character, levels = ordering))
ggplot(scenes, aes(scene, character)) +
geom_point() +
geom_path(aes(group = scene))
scenes <- dialogue %>%
count(scene, character) %>%
filter(n > 25) %>%        # scenes with > 25 character
ungroup() %>%
mutate(scene = as.numeric(factor(scene)))
# character = factor(character, levels = ordering))
ggplot(scenes, aes(scene, character)) +
geom_point() +
geom_path(aes(group = scene))
by_speaker_scene <- dialogue %>%
count(scene, character) %>%
filter(n>15)
speaker_scene_matrix <- by_speaker_scene %>%
acast(character ~ scene, fun.aggregate = length)
speaker_scene_matrix[1:5,1:5]
by_speaker_scene <- dialogue %>%
count(scene, character) %>%
filter(n>15)
speaker_scene_matrix <- by_speaker_scene %>%
acast(character ~ scene, fun.aggregate = length)
speaker_scene_matrix[1:10,1:10]
by_speaker_scene <- dialogue %>%
count(scene, character) %>%
filter(n>15)
speaker_scene_matrix <- by_speaker_scene %>%
acast(character ~ scene, fun.aggregate = length)
speaker_scene_matrix[1:10,1:10]
non_airport_scenes <- speaker_scene_matrix[, colSums(speaker_scene_matrix)<13]
View(non_airport_scenes)
non_airport_scenes <- speaker_scene_matrix[, colSums(speaker_scene_matrix)<13]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
library(igraph)
g <- graph.adjacency(cooccur, weighted = TRUE, mode = "undirected", diag = FALSE)
plot(g, edge.width = E(g)$weight)
non_airport_scenes <- speaker_scene_matrix[, colSums(speaker_scene_matrix)<10]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
library(igraph)
g <- graph.adjacency(cooccur, weighted = TRUE, mode = "undirected", diag = FALSE)
plot(g, edge.width = E(g)$weight)
non_airport_scenes <- speaker_scene_matrix[colSums(speaker_scene_matrix)>0, colSums(speaker_scene_matrix)<10]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
non_airport_scenes <- speaker_scene_matrix[rowSums(speaker_scene_matrix)>0, colSums(speaker_scene_matrix)<10]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
non_airport_scenes <- speaker_scene_matrix[rowSums(speaker_scene_matrix)>1, colSums(speaker_scene_matrix)<10]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
non_airport_scenes <- speaker_scene_matrix[rowSums(speaker_scene_matrix)>1, colSums(speaker_scene_matrix)<20]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
non_airport_scenes <- speaker_scene_matrix[rowSums(speaker_scene_matrix)>2, colSums(speaker_scene_matrix)<20]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
non_airport_scenes <- speaker_scene_matrix[rowSums(speaker_scene_matrix)>2, colSums(speaker_scene_matrix)<30]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
non_airport_scenes <- speaker_scene_matrix[rowSums(speaker_scene_matrix)>2, colSums(speaker_scene_matrix)<25]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
non_airport_scenes <- speaker_scene_matrix[rowSums(speaker_scene_matrix)>1, ]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
library(igraph)
g <- graph.adjacency(cooccur, weighted = TRUE, mode = "undirected", diag = FALSE)
plot(g, edge.width = E(g)$weight)
non_airport_scenes <- speaker_scene_matrix[rowSums(speaker_scene_matrix)>1, ]
cooccur <- non_airport_scenes %*% t(non_airport_scenes)
heatmap(cooccur)
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
dir_images = "assets/images/2017-01-28",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
i = 0
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f), encoding = "UTF-8")
outFile <- file.path(path_site,
dir_md,
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown',
base.url = "/")
opts_chunk$set(fig.path = dir_images,
fig.width  = 8.5,
fig.height = 5.25)
try(knit(text=content, output=outFile, encoding = "UTF-8"), silent=FALSE)
i = i + 1
}
message(paste0("The number of total processed files is:", i, sep = " "))
}
rmd2md()
#' This R script will process all R mardown files (those with in_ext file extention,
#' .rmd by default) in the current working directory. Files with a status of
#' 'processed' will be converted to markdown (with out_ext file extention, '.markdown'
#' by default). It will change the published parameter to 'true' and change the
#' status parameter to 'publish'.
#'
#' @param path_site path to the local root storing the site files
#' @param dir_rmd directory containing R Markdown files (inputs)
#' @param dir_md directory containing markdown files (outputs)
#' @param url_images where to store/get images created from plots directory +"/" (relative to path_site)
#' @param out_ext the file extention to use for processed files.
#' @param in_ext the file extention of input files to process.
#' @param recursive should rmd files in subdirectories be processed.
#' @return nothing.
#' @author Jason Bryer <jason@bryer.org> edited by Andy South
rmd2md <- function( path_site = getwd(),
dir_rmd = "_rmd",
dir_md = "_posts",
dir_images = "assets/images/2017-01-28/",
out_ext='.md',
in_ext='.Rmd',
recursive=FALSE) {
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
#andy change to avoid path problems when running without sh on windows
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
i = 0
for(f in files) {
message(paste("Processing ", f, sep=''))
content <- readLines(file.path(path_site,dir_rmd,f), encoding = "UTF-8")
outFile <- file.path(path_site,
dir_md,
paste0(substr(f, 1, (nchar(f)-(nchar(in_ext)))), out_ext))
render_jekyll(highlight = "pygments")
opts_knit$set(out.format='markdown',
base.url = "/")
opts_chunk$set(fig.path = dir_images,
fig.width  = 8.5,
fig.height = 5.25)
try(knit(text=content, output=outFile, encoding = "UTF-8"), silent=FALSE)
i = i + 1
}
message(paste0("The number of total processed files is:", i, sep = " "))
}
rmd2md()
#Contact GitHub API Training Shop Blog About
#漏 2017 GitHub, Inc. Terms Privacy Security Status Help
rmd2md()
rmd2md()
rmd2md()
rmd2md()
p1 <- dialogue_words %>%
filter(character=='meredith') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p2 <- dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p3 <- dialogue_words %>%
filter(character=='george') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p4 <- dialogue_words %>%
filter(character=='derek') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p1
p2
p3
p4
senti_stat <- dialogue_words %>%
inner_join(sentiments)
senti_stat %>%
filter(sentiment == "positive") %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1)
dialogue_words %>%
filter(character=='meredith') %>%
count(word, sort = T) %>%
as.data.frame(.)
p1 <- dialogue_words %>%
filter(character=='meredith') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p2 <- dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p3 <- dialogue_words %>%
filter(character=='george') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p4 <- dialogue_words %>%
filter(character=='derek') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p1
p2
p3
p4
senti_stat <- dialogue_words %>%
inner_join(sentiments)
senti_stat %>%
filter(sentiment == "positive") %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1)
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.)
dialogue_words %>%
filter(character=='george') %>%
count(word, sort = T) %>%
as.data.frame(.)
dialogue_words %>%
filter(character=='derek') %>%
count(word, sort = T) %>%
as.data.frame(.)
dialogue_words %>%
filter(character=='meredith') %>%
count(word, sort = T) %>%
as.data.frame(.)
dialogue_words %>%
filter(character=='derek') %>%
count(word, sort = T) %>%
as.data.frame(.)
p1 <- dialogue_words %>%
filter(character=='meredith') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p2 <- dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p3 <- dialogue_words %>%
filter(character=='george') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
p1
p2
p3
senti_stat <- dialogue_words %>%
inner_join(sentiments)
senti_stat %>%
filter(sentiment == "positive") %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1)
rmd2md()
rmd2md()
dialogue_words %>%
#   filter(character=='cristina') %>%
#   count(word, sort = T) %>%
#   as.data.frame(.)
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.)
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.)
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.)
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.)
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(size = 1.5, shape = 'star')
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2()
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2()
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.)
p2 <- dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.)
View(p2)
dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2()
p1 <- dialogue_words %>%
filter(character=='meredith') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(shape = 'star')
p2 <- dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(shape = 'star')
p3 <- dialogue_words %>%
filter(character=='george') %>%
count(word, sort = T) %>%
as.data.frame(.) %>%
wordcloud2(shape = 'star')
p1
p2
p3
#
# senti_stat <- dialogue_words %>%
#   inner_join(sentiments)
#
# senti_stat %>%
#   filter(sentiment == "positive") %>%
#   count(word, sort = T) %>%
#   as.data.frame(.) %>%
#   wordcloud2(size = 1)
p1 <- dialogue_words %>%
filter(character=='meredith') %>%
count(word, sort = T) %>%
filter(n>10) %>%
as.data.frame(.) %>%
wordcloud2(shape = 'star')
p2 <- dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
filter(n>10) %>%
as.data.frame(.) %>%
wordcloud2(shape = 'star')
p3 <- dialogue_words %>%
filter(character=='george') %>%
count(word, sort = T) %>%
filter(n>10) %>%
as.data.frame(.) %>%
wordcloud2(shape = 'star')
p1
p2
p3
#
# senti_stat <- dialogue_words %>%
#   inner_join(sentiments)
#
# senti_stat %>%
#   filter(sentiment == "positive") %>%
#   count(word, sort = T) %>%
#   as.data.frame(.) %>%
#   wordcloud2(size = 1)
p1 <- dialogue_words %>%
filter(character=='meredith') %>%
count(word, sort = T) %>%
filter(n>5) %>%
as.data.frame(.) %>%
wordcloud2(shape = 'star')
p2 <- dialogue_words %>%
filter(character=='cristina') %>%
count(word, sort = T) %>%
filter(n>5) %>%
as.data.frame(.) %>%
wordcloud2(shape = 'star')
p3 <- dialogue_words %>%
filter(character=='george') %>%
count(word, sort = T) %>%
filter(n>5) %>%
as.data.frame(.) %>%
wordcloud2(shape = 'star')
p1
p2
p3
#
# senti_stat <- dialogue_words %>%
#   inner_join(sentiments)
#
# senti_stat %>%
#   filter(sentiment == "positive") %>%
#   count(word, sort = T) %>%
#   as.data.frame(.) %>%
#   wordcloud2(size = 1)
