3:10 %>% accumulate(~ .x+2)
3:10 %>% accumulate(~ .x+3)
3:10 %>% accumulate(~ .x+3) # 产生以3为起点方差为3的序列
1:10 %>% accumulate(~ .x+3) # 产生以3为起点方差为3的序列
1:10 %>% accumulate(~ .x+3) # 产生以3为起点方差为3的序列
3:10 %>% accumulate(~ .y)
3:10 %>% accumulate(~ .y+2)
3:10 %>% accumulate(~ .x + .y)
1:5 %>% accumulate(~ .x) # 产生以3为起点方差为3的序列
1:5 %>% accumulate(~ .x) # 产生以3为起点方差为3的序列
# .y is element in the list
1:5 %>% accumulate(~ .y)
#
1:5 %>% accumulate(~ .x + .y)
2:6 %>% accumulate(~ .x) # 产生以3为起点方差为3的序列
# .y is element in the list
2:6 %>% accumulate(~ .y)
#
2:6 %>% accumulate(~ .x + .y)
2:6 %>% accumulate(~ .x + .y + 1) # 产生以2为起点2：6为累加值的序列
# is a lambda function
# .x is the accumulating value
2:6 %>% accumulate(~ .x) # 产生以3为起点方差为3的序列
# .y is element in the list
2:6 %>% accumulate(~ .y)
#
2:6 %>% accumulate(~ .x + .y + 1) # 产生以2为起点2：6为累加值的序列
rerun(2, rnorm(5)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 2))
rerun(2, rnorm(5)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:2))
# .x is the accumulating value
2:6 %>% accumulate(~ .x) # 产生以3为起点方差为3的序列
# .y is element in the list
2:6 %>% accumulate(~ .y)
#
2:6 %>% accumulate(~ .x + .y)
rerun(2, rnorm(5)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:2)) %>%
map(~ accumulate(., ~ .05 + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = simulation)) +
ggtitle("Simulations of a random walk with drift")
rerun(2, rnorm(5)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:2)) %>%
map(~ accumulate(., ~ .05 + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:2), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = simulation)) +
ggtitle("Simulations of a random walk with drift")
rerun(2, rnorm(5)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:2)) %>%
map(~ accumulate(., ~ .05 + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:5), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = simulation)) +
ggtitle("Simulations of a random walk with drift")
rerun(5, rnorm(100)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:100)) %>%
map(~ accumulate(., ~ .05 + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = simulation)) +
ggtitle("Simulations of a random walk with drift")
rerun(5, rnorm(100)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:5)) %>%
map(~ accumulate(., ~ .05 + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = simulation)) +
ggtitle("Simulations of a random walk with drift")
plotSim <- function(draft){
rerun(5, rnorm(100)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:5)) %>%
map(~ accumulate(., ~ draft + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = simulation)) +
ggtitle("Simulations of a random walk with drift")
}
# Understanding the arguments .x and .y when .f
# is a lambda function
# .x is the accumulating value
2:6 %>% accumulate(~ .x) # 产生以3为起点方差为3的序列
# .y is element in the list
2:6 %>% accumulate(~ .y)
#
2:6 %>% accumulate(~ .x + .y) # 产生以2为起点2：6为累加值的序列
# Simulating stochastic processes with drift
## Not run:
library(dplyr)
library(ggplot2)
plotSim <- function(draft){
rerun(5, rnorm(100)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:5)) %>%
map(~ accumulate(., ~ draft + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = simulation)) +
ggtitle("Simulations of a random walk with drift")
}
plotSim(0.05)
plotSim(0.1)
plotSim(0.5)
plotSim(0.8)
plotSim(1)
plotSim(5)
plotSim(1.4)
plotSim(0.01)
plotSim(0.001)
plotSim(0.1)
plotSim(1)
plotSim(0.001)
rerun(5, rnorm(100)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:5)) %>%
map(~ accumulate(., ~ draft + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = 'veal')) +
ggtitle("Simulations of a random walk with drift")
plotSim <- function(draft){
rerun(5, rnorm(100)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:5)) %>%
map(~ accumulate(., ~ draft + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = 'veal')) +
ggtitle("Simulations of a random walk with drift")
}
plotSim(0.001)
rerun(5, rnorm(100)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:5)) %>%
map(~ accumulate(., ~ draft + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(color = 'veal') +
ggtitle("Simulations of a random walk with drift")
plotSim <- function(draft){
rerun(5, rnorm(100)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:5)) %>%
map(~ accumulate(., ~ draft + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(color = 'veal') +
ggtitle("Simulations of a random walk with drift")
}
plotSim(0.001)
# Understanding the arguments .x and .y when .f
# is a lambda function
# .x is the accumulating value
2:6 %>% accumulate(~ .x) # 产生以3为起点方差为3的序列
# .y is element in the list
2:6 %>% accumulate(~ .y)
#
2:6 %>% accumulate(~ .x + .y) # 产生以2为起点2：6为累加值的序列
# Simulating stochastic processes with drift
## Not run:
library(dplyr)
library(ggplot2)
plotSim <- function(draft){
rerun(5, rnorm(100)) %>% # This is a convenient way of generating sample data. It works similarly to replicate(..., simplify = FALSE).
set_names(paste0("sim", 1:5)) %>%
map(~ accumulate(., ~ draft + .x + .y)) %>%
map_df(~ data_frame(value = .x, step = 1:100), .id = "simulation") %>%
ggplot(aes(x = step, y = value)) +
geom_line(aes(color = simulation)) +
ggtitle("Simulations of a random walk with drift")
}
plotSim(0.001)
# If each element of the output is a data frame, use
# map_df to row-bind them together:
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map_df(~ as.data.frame(t(as.matrix(coef(.)))))
# (if you also want to preserve the variable names see
# the broom package)
# If each element of the output is a data frame, use
# map_df to row-bind them together:
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map_df(~ as.data.frame(cyl = .$cyl, wt = t(as.matrix(coef(.)))))
# If each element of the output is a data frame, use
# map_df to row-bind them together:
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map_df(~ as.data.frame(t(as.matrix(cbind(.$cyl, coef(.))))))
# (if you also want to preserve the variable names see
# the broom package)
# If each element of the output is a data frame, use
# map_df to row-bind them together:
mtcars %>%
split(.$cyl) %>%
map(~ lm(mpg ~ wt, data = .x)) %>%
map_df(~ as.data.frame(t(as.matrix(coef(.)))))
# (if you also want to preserve the variable names see
# the broom package)
# Split into pieces, fit model to each piece, then predict
by_cyl <- mtcars %>% split(.$cyl)
mods <- by_cyl %>% map(~ lm(mpg ~ wt, data = .))
map2(mods, by_cyl, predict)
mtcars
mods
# Split into pieces, fit model to each piece, then predict
by_cyl <- mtcars %>% split(.$cyl)
mods <- by_cyl %>% map(~ glm(mpg ~ wt, data = .))
map2(mods, by_cyl, predict)
library("tidyr", lib.loc="~/R/win-library/3.4")
map2(mods, by_cyl, predict) %>%
unsplit()
map2(mods, by_cyl, predict) %>%
as.vector()
map2(mods, by_cyl, predict) %>%
as.vector() %>%
class()
map2(mods, by_cyl, predict) %>%
flatten()
map2(mods, by_cyl, predict) %>%
flatten_dbl()
mtcars$wt
map2(mods, by_cyl, predict) %>%
flatten_int()
map2(mods, by_cyl, predict) %>%
flatten_dbl()
a <- map2(mods, by_cyl, predict) %>%
flatten_dbl()
mtcars %>%
bind_cols(a)
a
a <- map2(mods, by_cyl, predict) %>%
flatten_df()
a
View(a)
mtcars
mtcars[,'mpg']
a <- map2(mods, by_cyl, predict) %>%
flatten_df() %>%
t()
mtcars %>%
inner_join(a)
a <- map2(mods, by_cyl, predict) %>%
flatten_df() %>%
t() %>%
as.data.frame()
mtcars %>%
inner_join(a)
mtcars
mtcars %>%
join(a, by=c(rownames(.)=rownames(a)))
mtcars %>%
join(a, by=c(rownames(.)==rownames(a)))
mtcars %>%
join(a, by=c(rownames(.)=rownames(a)))
mtcars %>%
join(a, by=c(rownames(mtcars)=rownames(a)))
a <- map2(mods, by_cyl, predict) %>%
flatten_df() %>%
t() %>%
as.data.frame() %>%
mutate(a=rownames(.))
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a)
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1)
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1))
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_line()+
coord_flip()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1))
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(mpg, e))+
geom_line()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_point()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_point()+
coord_flip()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = sqrt(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_point()+
coord_flip()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_point()+
coord_flip()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e=reorder(a,e)))+
geom_point()+
coord_flip()
mtcars %>%
mutate(a=rownames(.)) %>%
left_join(a) %>%
select(a, mpg, V1) %>%
mutate(e = abs(mpg-V1)) %>%
ggplot(aes(a, e))+
geom_point()+
coord_flip()
mtcars %>%
mutate(
mod1 = map(~ glm(mpg ~ wt, data = .)
)
library("dplyr", lib.loc="~/R/win-library/3.4")
detach("package:dplyr", unload=TRUE)
library("dplyr", lib.loc="~/R/win-library/3.4")
mtcars %>%
mutate(
mod1 = map(~ glm(mpg ~ wt, data = .)
)
mtcars %>%
mutate(
mod1 = map(~ glm(mpg ~ wt, data = .)
)
library("purrr", lib.loc="~/R/win-library/3.4")
mtcars %>%
mutate(
mod1 = map(~ glm(mpg ~ wt, data = .)
)
mtcars %>%
mutate(mod1 = map(~ glm(mpg ~ wt, data = .)
)
mtcars %>%
mtcars %>%
mutate(mod1 = map(~ glm(mpg ~ wt, data = .))
)
mtcars %>%
mutate(mod1 = map(., ~ glm(mpg ~ wt, data = .))
)
mtcars %>%
nest %>%
mutate(mod1 = map(., ~ glm(mpg ~ wt, data = .))
)
mtcars %>%
nest() %>%
mutate(mod1 = map(., ~ glm(mpg ~ wt, data = .))
)
library("tidyr", lib.loc="~/R/win-library/3.4")
mtcars %>%
nest()
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(., ~ glm(mpg ~ wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(., ~ glm(.$mpg ~ .$wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest()
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(.$mpg ~ .$wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .),
mod2 = map(data, ~ lm(mpg ~ wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .))
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map(summary)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map(mod1, summary)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, mtcars, predict)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, mtcars %>% select(mpg, wt), predict)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predict),
)
dim(mtcars)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predict),
y=data$mpg
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predic)
)
mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predict)
)
result <- mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predict)
)
View(result)
result$pred1
result$pred1[[1]]
result$pred1 %>% class()
result$pred1[[1]] %>% class()
result$pred1[[1]]-result$pred2[[1]]
sum(result$pred1[[1]]-result$pred2[[1]])
result$pred2[[1]]
result <- mtcars %>%
tbl_df() %>%
nest() %>%
mutate(mod1 = map(data, ~ glm(mpg ~ wt, data = .)),
mod2 = map(data, ~ lm(mpg ~ wt, data = .)),
pred1 = map2(mod1, data, predict),
pred2 = map2(mod2, data, predict)
)
result
