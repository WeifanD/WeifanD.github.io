# load and clean data
load_and_clean_data <- function(data_path){
raw_df = fread(data_path, sep = ',', header = TRUE, showProgress = TRUE)
df <- raw_df %>%
mutate_at(vars(matches("cnt")), as.numeric) %>%
mutate_at(vars(matches('stddev')), as.numeric) %>%
mutate_at(vars(matches("is")), as.factor) %>%
mutate(tel_origin = as.factor(tel_origin),
tel_risk_level = as.factor(tel_risk_level),
app_usetime = as.numeric(app_usetime),
device_uage_rate = round(device_uage_rate,1),
low_version = ifelse(((android_version < '3.1.0' && android_version != '')|
(ios_version < '3.1.0' && ios_version != '')), 1, 0)
)  %>%
dplyr::select(-thedate, -ch, -member_id, -tk, -device,
-android_version, -ios_version, -is_aclog, -delta_install_start_device,
-invite_reward, -coin_cnt)
print('raw data loaded and cleaned')
# apply(df,2,function(x)length(unique(x)))
return(df)
}
raw_data = load_and_clean_data(data_path='data/card.csv')
# load germancredit data
# data("germancredit")
# germancredit = germancredit
# filter variable via missing rate, iv, identical value rate
print('filter variable via missing rate, iv, identical value rate')
dt_s = var_filter(raw_data, y="is_tag", identical_limit = 0.99999, var_kp = c('isr','ish','iss','is_gaima','isou','is_vitual','is_default_teamid','is_default_vo','is_sim_except'))
print(dim(dt_s))
unique(dt_s$tel_origin)
print('breaking dt into train and test')
dt_list = split_df(dt_s, y="is_tag", ratio = 0.6, seed = 30)
train = dt_list$train; test = dt_list$test;
#print(dim(train))
# woe binning ------
# woebin generates optimal binning for numerical, factor and categorical variables using methods
# including tree-like segmentation or chi-square merge.
# bins = woebin(dt_s, y="is_tag")
# bins = woebin(dt_s, "creditability")
# woebin_plot(bins)
# binning adjustment
# # adjust breaks interactively
# breaks_adj = woebin_adj(dt_s, "creditability", bins)
# or specify breaks manually
breaks_adj = list(
is_regdate_eq_teacher     =c('0','1'),
is_newtk_and_startdevice  =c('0','1'),
is_regdate_eq_teacher     =c('0','1'),
# is_aclog                  =c('0','1'),
isr                       =c('0','1'),
ish                       =c('0','1'),
iss                       =c('0','1'),
is_gaima                  =c('0','1'),
isou                      =c('0','1'),
is_vitual                 =c('0','1'),
is_newtk_and_startdevice  =c('0','1'),
is_newtk_not_installapp   =c('0','1'),
is_default_teamid         =c('0','1'),
is_default_vo             =c('0','1'),
is_sim_except             =c('0','1')
)
print('binning data')
bins_adj = woebin(dt_s, y="is_tag", breaks_list=breaks_adj, no_cores=4)
# saveRDS(bins_adj, "bins_adj.rds")
# converting train and test into woe values
print('converting train and test into woe values')
train_woe = woebin_ply(train, bins_adj)
test_woe = woebin_ply(test, bins_adj)
cor(train_woe)
View(train_woe)
bins_adj$tel_origin
breaks_adj = list(
is_regdate_eq_teacher     =c('0','1'),
is_newtk_and_startdevice  =c('0','1'),
is_regdate_eq_teacher     =c('0','1'),
# is_aclog                  =c('0','1'),
isr                       =c('0','1'),
ish                       =c('0','1'),
iss                       =c('0','1'),
is_gaima                  =c('0','1'),
isou                      =c('0','1'),
is_vitual                 =c('0','1'),
is_newtk_and_startdevice  =c('0','1'),
is_newtk_not_installapp   =c('0','1'),
is_default_teamid         =c('0','1'),
is_default_vo             =c('0','1'),
is_sim_except             =c('0','1'),
tel_origin                =c('0','10','30','40')
)
bins_adj = woebin(dt_s, y="is_tag", breaks_list=breaks_adj, no_cores=4)
bins_adj$tel_origin
dt_s[,'is_tag,''tel_origin]
dt_s[,c('is_tag','tel_origin')]
dt_s %>% select(is_tag, tel_origin)
a = woebin(dt_s %>% select(is_tag, tel_origin), y="is_tag")
a
x=NULL;breaks_list=NULL;special_values=NULL;min_perc_fine_bin=0.02;min_perc_coarse_bin=0.05;stop_limit=0.1;max_num_bin=8;positive="bad|1";no_cores=NULL;print_step=0L;method="tree"a = woebin(dt_s %>% select(is_tag, tel_origin), y="is_tag")
x=NULL;breaks_list=NULL;special_values=NULL;min_perc_fine_bin=0.02;min_perc_coarse_bin=0.05;stop_limit=0.1;max_num_bin=8;positive="bad|1";no_cores=NULL;print_step=0L;method="tree"
dtm=dt_s %>% select(is_tag, tel_origin)
brkp = bstbrkp = total_iv = binning_tree = NULL
a = woebin(dtm, y="is_tag")
x=NULL;breaks_list=NULL;special_values=NULL;min_perc_fine_bin=0.02;min_perc_coarse_bin=0.05;stop_limit=0.1;max_num_bin=8;positive="bad|1";no_cores=NULL;print_step=0L;method="tree"
dtm=dt_s %>% select(is_tag, tel_origin)
a = woebin(dtm, y="is_tag")
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
Q
Q
list.files('scorecard-master/scorecard-master/R')
for(i in list.files('scorecard-master/scorecard-master/R')){source(paste0('scorecard-master/scorecard-master/R'),i)}
for(i in list.files('scorecard-master/scorecard-master/R')){source(paste0('scorecard-master/scorecard-master/R/'),i)}
paste0('scorecard-master/scorecard-master/R/'),list.files('scorecard-master/scorecard-master/R')[1])
paste0('scorecard-master/scorecard-master/R/',list.files('scorecard-master/scorecard-master/R')[1])
for(i in list.files('scorecard-master/scorecard-master/R')){source(paste0('scorecard-master/scorecard-master/R/',i)}
for(i in list.files('scorecard-master/scorecard-master/R')) source(paste0('scorecard-master/scorecard-master/R/',i))
a = woebin2_tree(dtm, min_perc_fine_bin, min_perc_coarse_bin, stop_limit, max_num_bin, breaks=breaks, spl_val=spl_val)
spl_val=NULL
a = woebin2_tree(dtm, min_perc_fine_bin, min_perc_coarse_bin, stop_limit, max_num_bin, breaks=breaks, spl_val=spl_val)
value = bin = . = y = variable = bad = good = brkp = badprob = count = merge_tolead = brkp2 = count_lag = count_lead = NULL
a = woebin2_tree(dtm, min_perc_fine_bin, min_perc_coarse_bin, stop_limit, max_num_bin, breaks=breaks, spl_val=spl_val)
is.numeric(dtm[,value])
dtm = setDT(dtm)
a = woebin2_tree(dtm, min_perc_fine_bin, min_perc_coarse_bin, stop_limit, max_num_bin, breaks=breaks, spl_val=spl_val)
a = woebin(dtm, y="is_tag")
a
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
woebin
dt=dtm
dt[[y]]
do.call(woebin2, args = list(
dtm = data.table(y=dt$is_tag, variable=names(dt$tel_origin), value=dt$tel_origin)
))
names(dt$tel_origin)
dt$is_tag
do.call(woebin2, args = list(
dtm = data.table(y=dt$is_tag, variable='tel_origin', value=dt$tel_origin)
))
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
a=woebin2(dtm = data.table(y=dt$is_tag, variable='tel_origin', value=dt$tel_origin))
a
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
View(initial_binning)
View(binning_tree)
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise2.R', echo=TRUE)
class(test)
str(test)
str(test)[1]
names(str(test))
str(test) %>% as.data.frame()
class(str(test))
breaks_adj = list(
is_regdate_eq_teacher     =c('0','1'),
is_newtk_and_startdevice  =c('0','1'),
is_regdate_eq_teacher     =c('0','1'),
# is_aclog                  =c('0','1'),
isr                       =c('0','1'),
ish                       =c('0','1'),
iss                       =c('0','1'),
is_gaima                  =c('0','1'),
isou                      =c('0','1'),
is_vitual                 =c('0','1'),
is_newtk_and_startdevice  =c('0','1'),
is_newtk_not_installapp   =c('0','1'),
is_default_teamid         =c('0','1'),
is_default_vo             =c('0','1'),
is_sim_except             =c('0','1'),
tel_origin                =c('0','10','30','40')
)
a = woebin(dtm, y="is_tag")
a
a = woebin(dtm, y="is_tag", breaks_list = breaks_adj)
a
library(scorecard)
library(data.table)
library(dplyr)
library(sqldf)
# load germancredit data
data("germancredit")
# filter variable via missing rate, iv, identical value rate
dt_sel = var_filter(germancredit, "creditability")
# woe binning ------
bins = woebin(dt_sel, "creditability")
dt_woe = woebin_ply(dt_sel, bins)
# glm ------
m = glm(creditability ~ ., family = binomial(), data = dt_woe)
# summary(m)
# Select a formula-based model by AIC
m_step = step(m, direction="both", trace=FALSE)
m = eval(m_step$call)
# summary(m)
# predicted proability
# dt_pred = predict(m, type='response', dt_woe)
# performace
# ks & roc plot
# perf_eva(dt_woe$creditability, dt_pred)
# scorecard
# Example I # creat a scorecard
card = scorecard(bins, m) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
card %>% group_by(variable) %>% summarise(m=max(points)) %>% ungroup()%>% summarise(sum(m))
card %>% group_by(variable) %>% summarise(m=min(points)) %>% ungroup()%>% summarise(sum(m))
bins
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise1.R', echo=TRUE)
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise1.R', echo=TRUE)
View(bins)
View(coef)
View(bins)
View(dt_woe)
View(dt_woe)
bins
a=rbindlist(bins, fill = TRUE)
View(a)
debugSource('~/Documents/master/Innotechx/scorecard/code/exercise1.R', echo=TRUE)
card %>% group_by(variable) %>% summarise(mi=min(points),mx=max(points)) %>% ungroup()%>% summarise(mi=sum(mi),mx=sum(mx))
card %>% group_by(variable) %>% summarise(mi=min(points),mx=max(points))
card %>% group_by(variable) %>% summarise(min(points)) %>% ungroup()%>% summarise(sum(m))
card %>% group_by(variable) %>% summarise(min(points)) %>% ungroup()
card = rbindlist(card, fill=TRUE)
card %>% group_by(variable) %>% summarise(min(points)) %>% ungroup()%>% summarise(sum(m))
card %>% group_by(variable) %>% summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>% summarise(mi=sum(mi),mx=sum(mx))
for(pdo in 20:50){
card = scorecard(bins, m, points0=600, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
}
for(pdo in 20:50){
card = scorecard(bins, m, points0=600, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
print(a)
}
for(pdo in 20:50){
card = scorecard(bins, m, points0=600, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
print(pdo,a)
}
for(pdo in 20:50){
card = scorecard(bins, m, points0=600, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
cat(pdo,a)
}
for(pdo in 20:50){
print(pdo)
card = scorecard(bins, m, points0=600, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
print(a)
}
for(pdo in 50:60){
print(pdo)
card = scorecard(bins, m, points0=600, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
print(a)
}
for(pdo in 50:55){
print(pdo)
card = scorecard(bins, m, points0=850, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
print(a)
}
for(pdo in 20:40){
print(pdo)
card = scorecard(bins, m, points0=850, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
print(a)
}
for(pdo in 10){
print(pdo)
card = scorecard(bins, m, points0=850, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
print(a)
}
for(pdo in 5){
print(pdo)
card = scorecard(bins, m, points0=850, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
print(a)
}
for(pdo in 20){
print(pdo)
card = scorecard(bins, m, points0=850, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
print(a)
}
for(pdo in 20){
print(pdo)
card = scorecard(bins, m, points0=650, odds0=1/19, pdo=pdo) #points0=600, odds0=1/19, pdo=50
card = rbindlist(card, fill=TRUE)
a=card %>%
group_by(variable) %>%
summarise(mi=min(points),mx=max(points)) %>%
ungroup()%>%
summarise(mi=sum(mi),mx=sum(mx))
print(a)
}
View(a)
library(dplyr)
library(ggplot2)
library(data.table)
library(scorecard)
library(broom)
m2 <- readRDS(m2.rds)
bins_adj <- readRDS(bins_adj.rds)
m2 <- readRDS(output/m2.rds)
setwd("~/Documents/master/Innotechx/scorecard")
m2 <- readRDS('output/m2.rds')
bins_adj <- readRDS('output/bins_adj.rds')
for(pdo in 30:50){
card = scorecard(bins_adj, m2, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
card %>% group_by(variable) %>% summarise(min=min(points),max=max(points)) %>% ungroup()%>% summarise(min=sum(min),max=sum(max))
}
for(pdo in 30:50){
card = scorecard(bins_adj, m2, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
View(card)
for(pdo in 5:10){
card = scorecard(bins_adj, m2, points0 = 650, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 4:10){
card = scorecard(bins_adj, m2, points0 = 650, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 4:10){
card = scorecard(bins_adj, m2, points0 = 750, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 4:10){
card = scorecard(bins_adj, m2, points0 = 100, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 1){
card = scorecard(bins_adj, m2, points0 = 100, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 1:3){
card = scorecard(bins_adj, m2, points0 = 97, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 1:3){
card = scorecard(bins_adj, m2, points0 = 95, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 2){
card = scorecard(bins_adj, m2, points0 = 750, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 2){
card = scorecard(bins_adj, m2, points0 = 93, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
card = scorecard(bins_adj, m2, points0 = 95, pdo=pdo)
for(pdo in 2){
card = scorecard(bins_adj, m2, points0 = 95, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 2){
card = scorecard(bins_adj, m2, points0 = 90, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 3){
card = scorecard(bins_adj, m2, points0 = 90, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 1){
card = scorecard(bins_adj, m2, points0 = 90, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
for(pdo in 10){
card = scorecard(bins_adj, m2, points0 = 750, pdo=pdo)
# points0 = 88, pdo = 2
card = rbindlist(card, fill=TRUE)
print(card %>% group_by(variable) %>%
summarise(min=min(points),max=max(points)) %>%
ungroup()%>% summarise(min=sum(min),max=sum(max)))
}
card = scorecard(bins_adj, m2, points0 = 750, pdo = 10)
card = rbindlist(card, fill=TRUE)
card %>% group_by(variable) %>% summarise(min=min(points),max=max(points)) %>% ungroup()%>% summarise(min=sum(min),max=sum(max))
summary(m2)
require(knitr, quietly=TRUE, warn.conflicts=FALSE)
source('rmd2md.R')
setwd("~/Documents/master/blog/weifand.github.io")
source('rmd2md.R')
rmd2md()
path_site = getwd()
dir_rmd = "_rmd"
in_ext='.Rmd'
list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
recursive=FALSE
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
files
in_ext='.Rmd$'
files <- list.files(path=file.path(path_site,dir_rmd), pattern=in_ext, ignore.case=TRUE, recursive=recursive)
source('rmd2md.R')
